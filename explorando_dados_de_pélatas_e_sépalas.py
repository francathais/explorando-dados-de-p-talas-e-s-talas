# -*- coding: utf-8 -*-
"""Explorando dados de pélatas e sépalas

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16pAYSVpvvu3RUVu0slMgkraapg1-3joO
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import random 
from bokeh.sampledata.iris import flowers as dados
import seaborn as sns

dados.shape

dados.head(15)

"""#Calculando média por colunas"""

type(dados) #ver a média de todas as linhas de uma única vez

np.mean(dados)

#Calculo da média de cada coluna
med_sl=np.mean(dados["sepal_length"]) #coluna 1
med_sl

#Calculo da média de cada coluna
med_sl=np.mean(dados["sepal_width"]) #coluna 2
med_sl

#Calculo da média de cada coluna
med_sl=np.mean(dados["petal_length"]) #coluna 3
med_sl

#Calculo da média de cada coluna
med_sl=np.mean(dados["petal_width"]) #coluna 4
med_sl

"""#Mediana"""

mediana_sl=np.median(dados["sepal_length"]) #coluna 1
mediana_sl

mediana_sl=np.median(dados["sepal_width"]) #coluna 1
mediana_sl

mediana_sl=np.median(dados["petal_length"]) #coluna 1
mediana_sl

mediana_sl=np.median(dados["petal_width"]) #coluna 1
mediana_sl

"""#Moda"""

moda_sl=dados['sepal_length'].mode()
moda_sl

moda_sl=dados['sepal_width'].mode()
moda_sl

moda_sl=dados['petal_length'].mode()
moda_sl  #tem duas modas

moda_sl=dados['petal_width'].mode()
moda_sl

"""#Separatrizes"""

#Percentil 10 
P10=np.quantile(dados["sepal_length"], 0.10)

P10

#P50 é a mediana
P50=np.quantile(dados["sepal_length"], 0.50)
P50

#3 Quartil
Q1=np.quantile(dados["sepal_length"], 0.25)
Q1

"""#Gerando gráficos"""

x=dados["sepal_length"]
y=dados["sepal_width"]

plt.scatter(x,y)
plt.xlabel("sepal_width")
plt.ylabel("sepal_length")

#plotar ponto médio
plt.plot(np.mean(x),np.mean(y),"or") #O bola e R red
#mediana
plt.plot(np.median(x),np.median(y),"oy") #O bola e Y amarelo
#moda
plt.plot(x.mode(), y.mode(), 'og') #O bola e Y amarelo

x2=dados['petal_length'] 
y2=dados['petal_width']

plt.scatter(x2,y2)
plt.xlabel("pedal_width")
plt.ylabel("pedal_length")

plt.plot(np.mean(x2),np.mean(y2),"or") 
plt.plot(np.median(x2),np.median(y2),"oy") 

#moda com dois valores vai dar erro no código ===> plt.plot(x2.mode(), y2.mode(), 'og') #O bola e Y amarelo

"""#Amplitude total"""

dados.max()

dados.min()

dados.iloc[:, 0:4] #Localizo só os dados numericos para depois diminuir o max por min e ter a amplitude

dados.iloc[:, 0:4].max()- dados.iloc[:, 0:4].min()

"""Amplitude (diferenças interquatilica): dq - Q3 - Q1"""

np.quantile(dados["sepal_length"], 0.75) #utilizando a função dataframe

Q3 =dados["sepal_length"].quantile(0.75)

Q1 =dados["sepal_length"].quantile(0.55)

dq= Q3-Q1
dq

dados.quantile(0.25)#outra forma de calcular para todas as colunas com numpy

dqt=dados.quantile(0.75) - dados.quantile(0.25) #outra forma de calcular subtração com numpy
dqt

"""#Desvio médio
o desvio absoluto de um elemento de um conjunto de dados é a diferença absoluta entre este elemento e um ponto dado. Tipicamente o ponto do qual o desvio é medido é medida de uma tendência central, mais frequentemente a mediana ou algumas vezes a média do conjunto de dados.
"""

dados.mad()

"""#Variancia e desvio padrão"""

dados.var() #variancia foi gerada p ada coluna numerica, menos string

np.var(dados)

dados.std() #std() calcula o desvio padrão do array dada ao longo do eixo especificado

"""#Coeficiente de variação"""

CV=np.std(dados)/np.mean(dados)*100 #com a biblioteca numpy

CV

CV2= dados.std()/dados.mean()*100 #outra forma de calcular

CV2

"""#Medidas de assimetria // person
população ou amostra: pego a media, subtraio da moda e divido pelo desvio padrao
- siméticas
- assimétrica negativa <0
- assimetrica positiva >0

#Boxplot com diferentes bibliotecas
"""

dados.head(15)

sns.boxplot(data=dados) #tem que por data para o banco de dados "dados" rodas
#bocplot com biblioteca sns

"""petal length tem mais dispesão e assimetria, e sepal width menos dispesão"""

sns.set(style="whitegrid", color_codes=True) #coloca grades
sns.boxplot(data=dados)

plt.boxplot(dados["sepal_length"]) #boxplot unico com biblioteca plt
plt.show()